#+title Shell Configuration

* bash
#+begin_src shell :tangle ~/.bashrc :mkdirp yes
#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

export STARSHIP_CONFIG=~/.bash_starship.toml
alias ls='ls --color=auto'
alias grep='grep --color=auto'
PS1='[\u@\h \W]\$ '

export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

eval "$(starship init bash)"
. "$HOME/.cargo/env"
#+end_src
* fish
#+begin_src shell :tangle ~/.config/fish/config.fish :mkdirp yes
set fish_greeting # Disable greeting
fish_add_path ~/.local/bin
fish_add_path ~/.local/share/gem/ruby/3.0.0/bin
alias ls="eza -alg --color=always --group-directories-first"
alias sail='[ -f sail ] && bash sail || bash vendor/bin/sail'
alias pa="php artisan"
alias sa="sail artisan"
alias cat="bat"

function note
    nvim ~/Documents/note.md
end

function mkt
    mkdir {nmap,content,exploits}
end

function settarget
    set ip_address $argv[1]
    set machine_name $argv[2]
    echo "$ip_address $machine_name" > /home/hann0t/.config/waybar/scripts/target
    pkill -RTMIN+8 waybar
end

function cleartarget
    echo "" > /home/hann0t/.config/waybar/scripts/target
    pkill -RTMIN+8 waybar
end

function wpGetPlugins
    if test (count $argv) -lt 1;
        echo "wpGetPlugins <url>"
    end
    curl -H 'Cache-Control: no-cache, no-store' -L -ik -s $argv[1] 2> /dev/null | grep -E 'wp-content/plugins/' | sed -E 's,href=|src=,THIIIIS,g' | awk -F "THIIIIS" '{print $2}' | cut -d "'" -f2
end

function runbackgroundprocess
    if test (count $argv) -lt 1;
        echo "runbackgroundprocess 'command'"
    end
    alacritty -e $argv[1]
end

function clearDocker
    docker rm $(docker ps -aq) --force 2> /dev/null
    docker rmi $(docker images -q) 2> /dev/null
    # docker network rm $(docker network ls -q) 2> /dev/null
    docker volume rm $(docker volume ls -q) 2> /dev/null
end

function vterm_printf;
    if begin; [  -n "$TMUX" ]  ; and  string match -q -r "screen|tmux" "$TERM"; end
        # tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$argv"
    else if string match -q -- "screen*" "$TERM"
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$argv"
    else
        printf "\e]%s\e\\" "$argv"
    end
end

starship init fish | source

# bun
set --export BUN_INSTALL "$HOME/.bun"
set --export PATH $BUN_INSTALL/bin $PATH
set --export PATH "$HOME/go/bin" $PATH

#+end_src
