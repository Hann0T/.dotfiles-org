#+title Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Package System Setup
#+begin_src emacs-lisp

  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  			 ("org" . "https://orgmode.org/elpa/")
  			 ("elpa" ."https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Init use-package on non-linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Backup
By default, Emacs creates automatic backups of files in their original directories, such “file.el”
and the backup “file.el~”.
This leads to a lot of clutter, so let’s tell Emacs to put all backups that it creates in
the TRASH directory.
#+begin_src emacs-lisp

  (setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))

#+end_src

* Basic UI Configuration
#+begin_src emacs-lisp

(tooltip-mode -1)
;; padding
(set-fringe-mode 10)

(add-to-list 'default-frame-alist '(alpha-background . 90))

;;(column-number-mode)

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))

(use-package doom-themes
  :init (load-theme 'doom-tokyo-night t))

#+end_src

** Font Configuration
#+begin_src emacs-lisp

(set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 240)

#+end_src

** Dashboard
#+begin_src emacs-lisp

  (use-package dashboard
    :ensure t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            (bookmarks . 3)
                            (projects . 3)
                            (registers . 3)))
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")
  				      (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))

#+end_src
** Mode line
#+begin_src emacs-lisp
;; Clean up the mode line
(setq-default mode-line-format
              '("%e" "  "
                (:propertize
                 ("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote))
                mode-line-frame-identification
                mode-line-buffer-identification
                "   "
                mode-line-position
                mode-line-format-right-align
                "  "
                (project-mode-line project-mode-line-format)
                " "
                (vc-mode vc-mode)
                "  "
                ;;mode-line-modes
                mode-line-misc-info
                "  ")
              project-mode-line t
              mode-line-buffer-identification '(" %b")
              mode-line-position-column-line-format '(" %l:%c"))

#+end_src
* Org
#+begin_src emacs-lisp

  (use-package org)
  (setq org-ellipsis " ▾"
        org-startup-folded 'content
        org-cycle-separator-lines 2
        org-fontify-quote-and-verse-blocks t)

  ;; Indent org-mode buffers for readability
  (add-hook 'org-mode-hook #'org-indent-mode)

#+end_src
** Auto-tangle
To execute or export code in org-mode code blocks, you’ll need to set up org-babel-load-languages for each language you’d like to use. This page documents all of the languages that you can use with org-babel.
#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.config/emacs/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
  ;; get tangled

#+end_src

** Babel Languages
#+begin_src emacs-lisp

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (shell . t)))

  (use-package org-tempo
    :ensure nil
    :demand t
    :config
    (dolist (item '(("sh" . "src sh")
                    ("el" . "src emacs-lisp")
                    ("li" . "src lisp")
                    ("sc" . "src scheme")
                    ("ts" . "src typescript")
                    ("py" . "src python")
                    ("yaml" . "src yaml")
                    ("json" . "src json")
                    ("einit" . "src emacs-lisp :tangle emacs/init.el")
                    ("emodule" . "src emacs-lisp :tangle emacs/modules/dw-MODULE.el")))
      (add-to-list 'org-structure-template-alist item)))

#+end_src

** Bullets
#+begin_src emacs-lisp

  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+end_src

** Timer
#+begin_src emacs-lisp

(setq org-clock-sound "~/Music/sfx/bell-notification.wav")

#+end_src
* General
replace general with:
https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Keymaps.html#index-define_002dkeymap
#+begin_src emacs-lisp

  (use-package general
    :config
    (general-create-definer hann0t/leader-keys
      :keymaps '(normal)
      :prefix "SPC"
      :global-prefix "SPC")

    (hann0t/leader-keys
      "SPC"  '(project-find-file :which-key "telescope")
      ","  '(counsel-ibuffer :which-key "list buffers")
      "."  '(counsel-find-file :which-key "find file")
      "rn"  '(lsp-rename :which-key "lsp rename")
      "rr"  '(lsp-find-references :which-key "lsp find references")
      "gg"  '(magit :which-key "magit")
      "ps"  '(project-find-regexp :which-key "project find regex")
      "tt" '(counsel-load-theme :which-key "choose theme")))

#+end_src

* LSP
#+begin_src emacs-lisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t)
  :bind (("C-h" . lsp-ui-doc-glance)
      ("TAB" . completion-at-point)
      ("C-SPC" . completion-at-point))
)

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode))

;; lsp and tsserver was making the jit-lock-function pretty slow
;; https://www.reddit.com/r/emacs/comments/1bwe92d/comment/ky5jk31/
(setq font-lock-maximum-decoration 2)
#+end_src
** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src
** Php
#+begin_src emacs-lisp

(use-package php-mode
    :mode "\\.php\\'"
    :hook (php-mode . lsp-deferred)
)

#+end_src
* Dired
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :bind (:map dired-mode-map
              ("b" . dired-up-directory))
  :config
  (setq dired-listing-switches "-alv --group-directories-first"
        ;;dired-omit-files "^\\.[^.].*"
        dired-omit-verbose nil
        dired-dwim-target 'dired-dwim-target-next
        dired-hide-details-hide-symlink-targets nil
        dired-kill-when-opening-new-dired-buffer t
        delete-by-moving-to-trash t))
#+end_src
* Evil
#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (evil-set-undo-system 'undo-redo)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* Project.el
#+begin_src emacs-lisp

(use-package project
    ;; :bind (
    ;;     ("C-f" . project-switch-project))
)
;; try to bind C-f to project-switch-project
;; try to create harpoon with project

#+end_src
* Magit
#+begin_src emacs-lisp

  (use-package magit
     :custom
     (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

* Core Settings
#+begin_src emacs-lisp

;; Core settings
(setq ;; Yes, this is Emacs
      inhibit-startup-message t

      ;; Make it easy to cycle through previous items in the mark ring
      set-mark-command-repeat-pop t

      ;; Don't warn on large files
      large-file-warning-threshold nil

      ;; Follow symlinks to VC-controlled files without warning
      vc-follow-symlinks t

      ;; Don't warn on advice
      ad-redefinition-action 'accept

      ;; Revert Dired and other buffers
      global-auto-revert-non-file-buffers t

      ;; Silence compiler warnings as they can be pretty disruptive
      native-comp-async-report-warnings-errors nil)

;; Core modes
(repeat-mode 1)                ;; Enable repeating key maps
(menu-bar-mode 0)              ;; Hide the menu bar
(tool-bar-mode 0)              ;; Hide the tool bar
(savehist-mode 1)              ;; Save minibuffer history
(scroll-bar-mode 0)            ;; Hide the scroll bar
(xterm-mouse-mode 1)           ;; Enable mouse events in terminal Emacs
(display-time-mode 1)          ;; Display time in mode line / tab bar
(fido-vertical-mode 1)         ;; Improved vertical minibuffer completions
(column-number-mode 1)         ;; Show column number on mode line
(tab-bar-history-mode 1)       ;; Remember previous tab window configurations
(auto-save-visited-mode 1)     ;; Auto-save files at an interval
(global-visual-line-mode 1)    ;; Visually wrap long lines in all buffers
(global-auto-revert-mode 1)    ;; Refresh buffers with changed local files

;; Tabs to spaces
(setq-default indent-tabs-mode nil tab-width 2)

(delete-selection-mode 1)    ;; You can select text and delete it by typing.
(electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.

(electric-pair-mode 1)       ;; Turns on automatic parens pairing
;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))

(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.

;; Display line numbers in programming modes
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
(setq display-line-numbers-mode 'relative)

;; Make icomplete slightly more convenient
(keymap-set icomplete-fido-mode-map "M-h" 'icomplete-fido-backward-updir)
(keymap-set icomplete-fido-mode-map "TAB" 'icomplete-force-complete)

;; Delete trailing whitespace before saving buffers
(add-hook 'before-save-hook 'delete-trailing-whitespace)


;; Match completion substrings that may be out of order
(defun dw/override-fido-completion-styles ()
  (setq-local completion-styles '(basic substring partial-completion emacs22)))
(add-hook 'icomplete-minibuffer-setup-hook 'dw/override-fido-completion-styles)

(setopt completions-detailed t
        completions-format 'vertical
        completion-auto-select t)

(setopt tab-always-indent 'complete
        completion-styles '(basic partial-completion substring flex)
        completion-ignore-case t
        read-buffer-completion-ignore-case t
        read-file-name-completion-ignore-case t
        completion-flex-nospace t
        completion-show-help nil
        completions-detailed t
        completions-group t
        completion-auto-help 'visible
        completion-auto-select 'second-tab
        completions-header-format nil
        completions-format 'vertical  ;'one-column
        completions-max-height 10)

(keymap-set minibuffer-local-map "C-p" #'minibuffer-previous-completion)
(keymap-set minibuffer-local-map "C-n" #'minibuffer-next-completion)
#+end_src

* Search
#+begin_src emacs-lisp

;; Make sure ripgrep is used everywhere
(setq xref-search-program 'ripgrep
      grep-command "rg -nS --noheading")

#+end_src
