#+title Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Package System Setup
#+begin_src emacs-lisp

  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  			 ("org" . "https://orgmode.org/elpa/")
  			 ("elpa" ."https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Init use-package on non-linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* All the icons
NOTE: The first time you load your configuration on a new machine, you'll
need to run the following command interactively so that mode line icons
display correctly:

M-x all-the-icons-install-fonts
#+begin_src emacs-lisp

  (use-package all-the-icons)

#+end_src

* Backup
By default, Emacs creates automatic backups of files in their original directories, such “file.el”
and the backup “file.el~”.
This leads to a lot of clutter, so let’s tell Emacs to put all backups that it creates in
the TRASH directory.
#+begin_src emacs-lisp

  (setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))

#+end_src

* Basic UI Configuration
#+begin_src emacs-lisp

  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)

  (menu-bar-mode -1)

  (add-to-list 'default-frame-alist '(alpha-background . 90))

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; disable line numbers for some modes
  (dolist (mode '(org-mode-hook
  		term-mode-hook
  		eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

  (use-package doom-themes
    :init (load-theme 'doom-tokyo-night t))

#+end_src

** Font Configuration
#+begin_src emacs-lisp

(set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 240)

#+end_src

* Org
#+begin_src emacs-lisp

  (use-package org)
  (setq org-ellipsis " ▾"
        org-startup-folded 'content
        org-cycle-separator-lines 2
        org-fontify-quote-and-verse-blocks t)

  ;; Indent org-mode buffers for readability
  (add-hook 'org-mode-hook #'org-indent-mode)

#+end_src
** Auto-tangle
To execute or export code in org-mode code blocks, you’ll need to set up org-babel-load-languages for each language you’d like to use. This page documents all of the languages that you can use with org-babel.
#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.config/emacs/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
  ;; get tangled

#+end_src

** Babel Languages
#+begin_src emacs-lisp

  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

** Bullets
#+begin_src emacs-lisp

  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

#+end_src

* General
#+begin_src emacs-lisp

  (use-package general
    :config
    (general-create-definer hann0t/leader-keys
      :keymaps '(normal)
      :prefix "SPC"
      :global-prefix "SPC")

    (hann0t/leader-keys
      "SPC"  '(project-find-file :which-key "telescope")
      "b"  '(counsel-ibuffer :which-key "list buffers")
      "."  '(counsel-find-file :which-key "find file")
      "gg"  '(magit :which-key "magit")
      "sd"  '(project-find-regexp :which-key "project find regex")
      "tt" '(counsel-load-theme :which-key "choose theme")))

#+end_src

* Ivy
#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)	
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
  	 ("C-x b" . counsel-ibuffer)
  	 ("C-x C-f" . counsel-find-file)
  	 :map minibuffer-local-map
  	 ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))

#+end_src

* Evil
#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (evil-set-undo-system 'undo-redo)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* Hydra
#+begin_src emacs-lisp

  ;;(use-package hydra)
  ;;
  ;;(defhydra hydra-text-scale (:timeout 4)
  ;;  "scale text"
  ;;  ("j" text-scale-increase "in")
  ;;  ("k" text-scale-decrease "out")
  ;;  ("f" nil "finished" :exit t))
  ;;
  ;;(hann0t/leader-keys
  ;;  "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* Projectile
#+begin_src emacs-lisp

  ;;(use-package projectile
  ;;  :diminish projectile-mode
  ;;  :config (projectile-mode)
  ;;  :custom ((projectile-completion-system 'ivy))
  ;;  :bind-keymap
  ;;  ("C-c p" . projectile-command-map)
  ;;  :init
  ;;  (setq projectile-project-search-path '(("~/Personal" . 1) ("~/Work" . 1)))
  ;;  (setq projectile-switch-project-action #'projectile-dired))

  ;;(use-package counsel-projectile
  ;;  :config (counsel-projectile-mode))

#+end_src

* Project.el
#+begin_src emacs-lisp

  (use-package project
      ;;:bind-keymap (
      ;;    ("C-f" . project-switch-project))
  )
  ;; try to bind C-f to project-switch-project
  ;; try to create harpoon with project

#+end_src
* Magit
#+begin_src emacs-lisp

  (use-package magit)
    ;; :custom
    ;; (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src
